<!DOCTYPE html>
<html>
  <head>
 <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">
    <!-- Animate CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css" integrity="sha384-OHBBOqpYHNsIqQy8hL1U+8OXf9hH6QRxi0+EODezv82DfnZoV7qoHAZDwMwEJvSw" crossorigin="anonymous">
    <!-- Icons CSS -->
    <link rel="stylesheet" href="/css/font-awesome.css">
    <link rel="stylesheet" href="/css/fontello.css">
    <link rel="stylesheet" href="/bootstrap-select/dist/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="/css/file_browser_style.css">
    <title><%= title %></title>
  </head>
  <body>
    <!-- JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="/jquery/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
    <script src="/utf8/utf8.js"></script>

    <script>
      let Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}
      let selection = null;
      let theSelected = {};
      let nextId = 0;
      let total = 0;
      let homeDir = null;
      let showHidden = false;

      let animationEnd = (function(el)
      {
        var animations = { animation: 'animationend', OAnimation: 'oAnimationEnd', MozAnimation: 'mozAnimationEnd', WebkitAnimation: 'webkitAnimationEnd', };

        for(let t in animations)
        {
          if(el.style[t] !== undefined) return animations[t];
        }
      })(document.createElement('div'));

      function make_base_auth(user,password)
      {
        let tok = user + ':' + password;
        let hash = Base64.encode(tok);

        return "xBasic " + hash;
      }

      function toHex(s)
      {
        let hex, i;
        let res = "";
        let codeUnit;

        for (i = 0;i < s.length;i++)
        {
          hex = s.charCodeAt(i).toString(16);
          codeUnit = ("000" + hex).slice(-4);

          if(codeUnit.substring(0,2) == "00") res += "\\x" + codeUnit.substring(2,4);
          else res += "\\u" + codeUnit;
        }
        return res;
      }

      function bytesToSize(bytes)
      {
        let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];

        if(bytes == 0) return '0 Bytes';

        let i = parseInt(Math.floor(Math.log(bytes)/Math.log(1024)),10);
        if(i == 0) return `${bytes} ${sizes[i]}`;
        return `${(bytes / (1024 ** i)).toFixed(1)} ${sizes[i]}`;
      }

      function callGetPathInfo(path,options,username,password,callback)
      {
        let encoded_path = utf8.encode(path);
        let body = { path:path };

        for(let option in options) body[option] = options[option];
        $.ajax({
          url: "https://psylo.esecuresend.com:20001/getPathInfo",
          type: "POST",
          data: JSON.stringify(body),
          contentType: 'application/json; charset=utf-8',
          dataType: 'json',
          xhrFields: { withCredentials: true },
          async:true,
          beforeSend: function(xhr) { xhr.setRequestHeader("Authorization",make_base_auth(username,password)); },
          success: function(data)
          {
            callback(path,data);
          }
        });
      }

      function getDirectoryListing(path,callback)
      {
        callGetPathInfo(path,{},'<%= username %>','<%= password %>',callback);
      }

      function getDirectorySize(path,callback)
      {
        callGetPathInfo(path,{ deep:true, collapseEntries:true, numEntriesLimit:8192 },'<%= username %>','<%= password %>',callback);
      }

      function addDirectoryTableRow(context,table,fileInfo)
      {
        let displayStyle = "";

        if(fileInfo.isHidden && !showHidden) displayStyle = "none";

        let path = fileInfo.path;
        let directoryCell0HTML = '<td class="caret"><span class="fa fa-caret-right"></span></td>';
        let fileNameHTML = '<td class="name">' + fileInfo.filename + '</td>';
        let selector1HTML = '<td class="selector"><button type="button" class="btn btn-primary btn-sm"><span class="fa fa-plus"></span></button></td>';
        let selector2HTML = '<td class="selector"><button type="button" class="btn btn-warning btn-sm"><span class="fa fa-minus"></span></button></td>';
        let row = table.insertRow(table.rows.length);
        let cell0 = row.insertCell(0);
        let cell1 = row.insertCell(1);
        let cell2 = row.insertCell(2);

        row.style.display = displayStyle;
        if(fileInfo.type == "directory")
        {
          row.className = "folder";
          cell1.innerHTML = '<td class="file-size"></td>'
        }
        else
        {
          row.className = "file";
          cell1.innerHTML = `<td class="file-size"> ${bytesToSize(fileInfo.size)}</td>`;
        }
        cell0.innerHTML = fileNameHTML;
        cell0.className = "name";
        cell1.className = "file-size";
        if(theSelected[path] == null) cell2.innerHTML = selector1HTML;
        else 
        {
          let id = getNextId();

          cell2.id = id;
          theSelected[path].directoryElementSelector = id;
          cell2.innerHTML = selector2HTML;
        }
        cell2.className = "selector";
        cell2.onclick = function(event) { context.onAddRemove(context,cell2,event); }
        row.onclick = function(event) { context.onChildNav(context,row,event); }
        row.onkeydown = function(event) { context.onChildNav(context,row,event); }
        row.setAttribute('fileInfo',JSON.stringify(fileInfo));
      }

      function populateDirectoryTable(context,table,data,startIndex)
      {
        let i,index = startIndex;

        if(data && data.info && data.info.children)
        {
          data.info.children.sort(function(a,b)
          { 
            let x = a.title.toLowerCase();
            let y = b.title.toLowerCase();
            
            return x<y?-1:x>y?1:0;
          });

          for(i = 0;i < data.info.children.length;i++)
          {
            let fileInfo = data.info.children[i];

            fileInfo.filename = fileInfo.title;
            fileInfo.path = fileInfo.path;
            if(fileInfo.type == "directory") addDirectoryTableRow(context,table,fileInfo);
          }
          for(i = 0;i < data.info.children.length;i++)
          {
            let fileInfo = data.info.children[i];

            fileInfo.filename = fileInfo.title;
            fileInfo.path = fileInfo.path;
            if(fileInfo.type == "regular") addDirectoryTableRow(context,table,fileInfo);
          }
        }
      }

      function handleRowClick(context,target,event)
      {
        let fileInfo = JSON.parse(target.getAttribute('fileInfo'));
        let inputText = document.getElementById('path');

        if(fileInfo.type == "directory")
        {
          inputText.value = fileInfo.path;
          getDirectoryListing(fileInfo.path,function(path,data)
          {
            let fileBrowser = document.getElementById('file-browser');

            $('#file-browser').one(animationEnd,function() { $('#file-browser').removeClass("slideInRight"); });
            fileBrowser.classList.add("slideInRight");
            populateDirectory(path,data);
            selection = fileInfo;
          });
        }
      }

      function getNextId()
      {
        return "" + nextId++;
      }

      function addSelectedListTableRow(context,table,fileInfo)
      {
        let fileNameHTML = '<td class="name">' + fileInfo.filename + '</td>';
        let selectorHTML = '<td class="selector"><button type="button" class="btn btn-warning btn-sm"><span class="fa fa-minus"></span></button></td>';
        let row = table.insertRow(table.rows.length);
        let cell0 = row.insertCell(0);
        let cell1 = row.insertCell(1);
        let cell2 = row.insertCell(2);
        let id = getNextId();

        row.id = id;
        if(fileInfo.type == "directory") row.className = "folder";
        else row.className = "file";
        cell0.innerHTML = fileNameHTML;
        cell0.className = "name";
        cell1.innerHTML = `<td class="file-size"> ${bytesToSize(fileInfo.size)}</td>`;
        cell1.className = "file-size";
        cell2.innerHTML = selectorHTML;
        cell2.className = "selector";
        cell2.onclick = function(event) { context.onAddRemove(context,cell2,event); }
        row.setAttribute('fileInfo',JSON.stringify(fileInfo));
        return id;
      }

      function addToTheSelected(context,el)
      {
        let row = el.parentNode;
        let fileInfo = JSON.parse(row.getAttribute('fileInfo'));
        let path = fileInfo.path;
        let selectedList = document.getElementById('selected_list');
        let id1 = getNextId();

        el.id = id1;
        if(fileInfo.type == "regular") 
        {
          let id2 = addSelectedListTableRow(context,selectedList,fileInfo);
          let element = document.getElementById("total");

          total += fileInfo.size;
          element.textContent = bytesToSize(total);
          theSelected[path] = { directoryElementSelector:id1, slistElementSelector:id2, fileInfo:fileInfo };
        }
        else
        {
          getDirectorySize(fileInfo.path,function(path,data)
          {
            data.info.filename = data.info.title;

            let fileInfo = data.info;
            let id2 = addSelectedListTableRow(context,selectedList,fileInfo);
            let element = document.getElementById("total");

            theSelected[path] = { directoryElementSelector:id1, slistElementSelector:id2, fileInfo:fileInfo };
            total += fileInfo.size;
            element.textContent = bytesToSize(total);
          });
        }
      }

      function removeFromTheSelected(context,path)
      {
        if(theSelected[path] != null)
        {
          let selectedList = document.getElementById('selected_list');
          let id = theSelected[path].id;
          let selectorHTML = '<td class="selector"><button type="button" class="btn btn-primary btn-sm"><span class="fa fa-plus"></span></button></td>';
          let dtElId = theSelected[path].directoryElementSelector;
          let slElId = theSelected[path].slistElementSelector;
          let el1 = document.getElementById(dtElId);
          let el2 = document.getElementById(slElId);
          let fileInfo = theSelected[path].fileInfo;
          let element = document.getElementById("total");

          if(fileInfo != null)
          { 
            total -= fileInfo.size;
            element.textContent = bytesToSize(total);
          }
  
          if(el1 != null)
          {
            let row1 = el1.parentNode;

            row1.cells[2].innerHTML = selectorHTML;
            row1.cells[2].className = "selector";
            row1.cells[2].onclick = function(event) { context.onAddRemove(context,row1.cells[2],event); };
          }
          if(el2 != null) el2.parentNode.removeChild(el2);
        }
        delete theSelected[path];
      }

      function handleSelectClick(context,target,event)
      {
        event.stopPropagation();
   
        let row = target.parentNode;
        let fileInfo = JSON.parse(row.getAttribute('fileInfo'));
        let path = fileInfo.path;

        if(theSelected[path] == null)
        {
          addToTheSelected(context,target);
          target.innerHTML = '<td class="selector"><button type="button" class="btn btn-warning btn-sm"><span class="fa fa-minus"></span></button></td>';
        }
        else
        {
          removeFromTheSelected(context,path);
          target.innerHTML = '<td class="selector"><button type="button" class="btn btn-primary btn-sm"><span class="fa fa-plus"></span></button></td>';
        }
        target.className = "selector";
        target.onclick = function(event) { context.onAddRemove(context,target,event); }
      }

      function handleHeaderClick(context,target,event)
      {
        let path = target.getAttribute('path');
        let inputText = document.getElementById('path');

        getDirectoryListing(path,function(path,data)
        {
          let fileBrowser = document.getElementById('file-browser');

          inputText.value = path;
          $('#file-browser').one(animationEnd,function() { $('#file-browser').removeClass("slideInLeft"); });
          fileBrowser.classList.add("slideInLeft");
          populateDirectory(path,data);
        });
      }

      function populateDirectoryHeader(context,header,data,path)
      {
        let pathComponents = path.split('/');
        let lastComponent = pathComponents[pathComponents.length - 1];
        let selectorHTML1 = '<td class="selector"><button type="button" class="btn btn-warning btn-sm"><span class="fa fa-minus"></span></button></td>';
        let selectorHTML2 = '<td class="selector"><button type="button" class="btn btn-primary btn-sm"><span class="fa fa-plus"></span></button></td>';


        if(pathComponents[0] == "") pathComponents = pathComponents.slice(1);
        data.info.filename = data.info.title;
        if(path == "" && homeDir == null) homeDir = data.info.key;
        if(path == "" || homeDir == path) lastComponent = "Home Directory";
        else
        {
          if(lastComponent == "" && pathComponents.length >= 2) lastComponent = pathComponents[pathComponents.length - 2];
          if(lastComponent == "") lastComponent = "Root Directory";
        }
        header.cells[0].textContent = lastComponent;
        header.onclick = function(event) { context.onParentNav(context,header,event); };
        if(theSelected[path] != null || (homeDir != null && theSelected[homeDir] != null)) header.cells[2].innerHTML = selectorHTML1;
        else header.cells[2].innerHTML = selectorHTML2;
        header.cells[2].onclick = function(event) { context.onAddRemove(context,header.cells[2],event); };
        if(pathComponents.length >= 2)
          header.setAttribute('path','/' + pathComponents.slice(0,pathComponents.length - 1).join('/'));
        else 
          header.setAttribute('path','/');
        header.setAttribute('fileInfo',JSON.stringify(data.info));
      }

      function filterDirectoryList()
      {
        let directoryList = document.getElementById('directory_contents');
        let s = document.getElementById('filter_text').value;
        let pattern = new RegExp(s,"i")

        for(let i = 0;i < directoryList.rows.length;i++)
        {
          let fileInfo = JSON.parse(directoryList.rows[i].getAttribute('fileInfo'));

          if(fileInfo.title.match(pattern) && (fileInfo.isHidden && showHidden || !fileInfo.isHidden)) directoryList.rows[i].style.display = "";
          else directoryList.rows[i].style.display = "none";
        }
      }

      function populateDirectory(path,data)
      {
        let directoryHeader = document.getElementById('directory_name');
        let directoryList = document.getElementById('directory_contents');
        let headerContext = { onParentNav:handleHeaderClick, onAddRemove:handleSelectClick };
        let dtableContext = { onChildNav:handleRowClick, onAddRemove:handleSelectClick };

        directoryList.innerHTML = "";
        populateDirectoryHeader(headerContext,directoryHeader,data,path);
        populateDirectoryTable(dtableContext,directoryList,data,0);
        filterDirectoryList();
      }

      function toggleHidden()
      {
        let toggle = document.getElementById('vis_toggle');
        let showHTML = '<button type="button" class="btn btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="Show hidden files?"><span class="fa fa-eye-slash"></span></button>';
        let hideHTML = '<button type="button" class="btn btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="Hide hidden files?"><span class="fa fa-eye"></span></button>';

        if(showHidden)
        {
          showHidden = false;
          toggle.innerHTML = showHTML;
        }
        else 
        {
          showHidden = true;
          toggle.innerHTML = hideHTML;
        }

        filterDirectoryList();
      }


      function init()
      {
        let input = document.getElementById('path');
        let element = document.getElementById("total");
        let visToggle = document.getElementById('vis_toggle');
        let filterText = document.getElementById('filter_text');

        element.textContent = bytesToSize(total);
        visToggle.onclick = toggleHidden;
        input.onkeypress = function(e)
        {
          if(!e) e = window.event;

          let keyCode = e.keyCode || e.which;

          if(keyCode == '13')
          {
            getDirectoryListing(input.value,populateDirectory);
            return false;
          }
        }

        filterText.addEventListener("keyup",function(event)
        {
           event.preventDefault();
           //if(event.keyCode === 13) document.getElementById('do_filter').click();
           //else filterDirectoryList();
           filterDirectoryList();
        });

        getDirectoryListing(input.value,populateDirectory);
      }

      $(document).ready(init);

    </script>

    <div class="wrapper border rounded">
      <div class="container">
        <div class="row">
          <div class="col-sm-3">
             <select class="selectpicker animated bounce">
               <option data-icon="icon-cloud" selected>Filing Cabinet</option>
               <option data-icon="fa fa-cube">Location</option>
               <option data-icon="fa fa-cube">Ipsum</option>
               <option data-icon="fa fa-cube">Lorem</option>
             </select>
          </div>
          <div class="col-sm-8 full-path">
            <input class="form-control" id="path" type="text" value="">
          </div>
          <div class="col-sm-1 hidden-files-toggle" id="vis_toggle">
            <button type="button" class="btn btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="Show hidden files?"><span class="fa fa-eye-slash"></span></button>
          </div>
        </div>
        <div class="row mt-4 overflow-hidden">
          <div class="col-sm-8">
            <div class="row header animated fadeInUp">
              <table class="table table-sm table-hover">
                <tbody>
                  <tr class="folder" id="directory_name">
                    <td class="name">/td>
                    <td class="file-size"></td>
                    <td class="selector"><button type="button" class="btn btn-primary btn-sm"><span class="fa fa-plus"></span></button></td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div id="file-browser" class="row animated file-browser">
              <table class="table table-sm table-hover" id="directory_contents">
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
          <div class="col-sm-4">
            <h5>Selected</h5>
            <div class="selected-list">
              <table class="table table-sm" id="selected_list">
                <tbody>
                </tbody>
              </table>
            </div>
            <div class="total">Total: <span id="total"></span></div>
          </div>
        </div>
        <div class="row mt-4">
          <div class="col-sm-8">
            <div class="form-group">
              <input id="filter_text" class="form-control" type="text" placeholder="Filter...">
            </div>
          </div>
          <div class="col-sm-4"><button type="button" class="btn btn-block btn-primary">Ok Go!</button></div>
        </div>
      </div>
    </div>
  </body>
</html>
